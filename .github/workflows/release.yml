name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  # First, publish to crates.io
  publish-crates:
    name: Publish Rust crates to crates.io
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install Linux dependencies
        run: bash scripts/install_linux_deps.sh
      
      - name: Check versions
        run: |
          TAG_VERSION="${GITHUB_REF#refs/tags/v}"
          WORKSPACE_VERSION=$(grep -m1 'version =' Cargo.toml | sed -E 's/.*"(.*)".*/\1/')
          
          if [ "$TAG_VERSION" != "$WORKSPACE_VERSION" ]; then
            echo "Error: Tag version v$TAG_VERSION does not match workspace version $WORKSPACE_VERSION"
            exit 1
          fi
          
          echo "Publishing version $TAG_VERSION"
      
      - name: Publish terminator crate
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          cd terminator
          cargo publish --no-verify
          echo "Waiting for crates.io to index..."
          sleep 30
      
      - name: Publish terminator-workflow-recorder crate
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          cd terminator-workflow-recorder
          cargo publish --no-verify

  # Build native binaries for npm packages
  build-npm:
    name: Build npm binaries - ${{ matrix.settings.target }}
    needs: [publish-crates]  # Wait for crates to be published
    runs-on: ${{ matrix.settings.host }}
    strategy:
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: |
              cd bindings/nodejs
              npm run build  
              cp terminator.win32-x64-msvc.node npm/win32-x64-msvc/
          - host: windows-11-arm
            target: aarch64-pc-windows-msvc
            build: |
              cd bindings/nodejs
              npm run build
              cp terminator.win32-arm64-msvc.node npm/win32-arm64-msvc/
          - host: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            build: |
              cd bindings/nodejs
              npm run build
              cp terminator.linux-x64-gnu.node npm/linux-x64-gnu/
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              cd bindings/nodejs
              npm run build -- --target x86_64-apple-darwin
              cp terminator.darwin-x64.node npm/darwin-x64/
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              cd bindings/nodejs
              npm run build -- --target aarch64-apple-darwin
              cp terminator.darwin-arm64.node npm/darwin-arm64/

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Linux dependencies
        if: matrix.settings.host == 'ubuntu-22.04'
        run: bash scripts/install_linux_deps.sh

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}

      - name: Install dependencies
        run: |
          cd bindings/nodejs
          rm -f *.tgz
          rm -rf node_modules package-lock.json
          npm install
        shell: bash

      - name: Sync version
        run: |
          cd bindings/nodejs
          npm run sync-version

      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            bindings/nodejs/npm/*/
            !bindings/nodejs/npm/*/*.tgz

  # Publish npm packages
  publish-npm:
    name: Publish npm packages
    runs-on: ubuntu-latest
    needs: [build-npm]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Copy artifacts to npm packages
        run: |
          cp -r artifacts/bindings-*/npm/* bindings/nodejs/npm/ || true

      - name: Sync version for publish
        run: |
          cd bindings/nodejs
          npm run sync-version

      - name: Publish platform packages
        run: |
          cd bindings/nodejs
          for dir in npm/*/; do
            if [ -d "$dir" ] && [ -f "$dir/package.json" ]; then
              echo "Publishing $(basename "$dir")"
              cd "$dir"
              if ls *.node 1> /dev/null 2>&1; then
                npm publish --access public || echo "Package already published or failed"
              else
                echo "No .node file found, skipping $(basename "$dir")"
              fi
              cd ../..
            fi
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish main package
        run: |
          cd bindings/nodejs
          npm install
          rm -f *.tgz
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-crates, publish-npm]
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}