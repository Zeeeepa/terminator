name: 'Terminator Web Test'
description: 'Test websites using Terminator SDK with desktop automation capabilities'
branding:
  icon: 'monitor'
  color: 'blue'

inputs:
  language:
    description: 'Language to use for automation (python or typescript)'
    required: false
    default: 'python'
  
  website-url:
    description: 'URL of the website to test'
    required: true
  
  test-script:
    description: 'Path to the test script relative to repository root'
    required: true
  
  browser:
    description: 'Browser to use for testing (chrome, firefox, edge)'
    required: false
    default: 'chrome'
  
  headless:
    description: 'Run tests in headless mode (true/false)'
    required: false
    default: 'false'
  
  timeout:
    description: 'Test timeout in seconds'
    required: false
    default: '300'
  
  python-version:
    description: 'Python version to use (only for python language)'
    required: false
    default: '3.11'
  
  node-version:
    description: 'Node.js version to use (only for typescript language)'
    required: false
    default: '20'

outputs:
  test-result:
    description: 'Test execution result (success/failure)'
    value: ${{ steps.run-test.outputs.result }}
  
  screenshot-path:
    description: 'Path to screenshot if test fails'
    value: ${{ steps.run-test.outputs.screenshot }}

runs:
  using: 'composite'
  steps:
    - name: Setup Ubuntu Desktop Environment
      if: runner.os == 'Linux'
      shell: bash
      run: |
        # Install desktop environment and display server
        sudo apt-get update
        sudo apt-get install -y \
          xvfb \
          fluxbox \
          x11-utils \
          x11-xserver-utils \
          xdotool \
          libgtk-3-dev \
          libx11-dev \
          libxext-dev \
          libxrandr-dev \
          libxss1 \
          libasound2 \
          libatk-bridge2.0-0 \
          libdrm2 \
          libxcomposite1 \
          libxdamage1 \
          libxrandr2 \
          libgbm1 \
          libgtk-3-0 \
          libgdk-pixbuf2.0-0

    - name: Install Browser (Ubuntu)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        case "${{ inputs.browser }}" in
          chrome)
            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
            sudo apt-get update
            sudo apt-get install -y google-chrome-stable
            ;;
          firefox)
            sudo apt-get install -y firefox
            ;;
          edge)
            curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
            sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/
            sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/microsoft.gpg] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge-dev.list'
            sudo apt-get update
            sudo apt-get install -y microsoft-edge-stable
            ;;
        esac

    - name: Install Browser (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        switch ("${{ inputs.browser }}") {
          "chrome" {
            if (-not (Get-Command "chrome.exe" -ErrorAction SilentlyContinue)) {
              $url = "https://dl.google.com/chrome/install/latest/chrome_installer.exe"
              Invoke-WebRequest -Uri $url -OutFile "chrome_installer.exe"
              Start-Process -FilePath "chrome_installer.exe" -ArgumentList "/silent", "/install" -Wait
            }
          }
          "firefox" {
            if (-not (Get-Command "firefox.exe" -ErrorAction SilentlyContinue)) {
              $url = "https://download.mozilla.org/?product=firefox-latest&os=win64&lang=en-US"
              Invoke-WebRequest -Uri $url -OutFile "firefox_installer.exe"
              Start-Process -FilePath "firefox_installer.exe" -ArgumentList "/S" -Wait
            }
          }
          "edge" {
            # Edge is pre-installed on Windows runners
            Write-Host "Microsoft Edge is already available"
          }
        }

    - name: Start Virtual Display (Ubuntu)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        # Start Xvfb (X Virtual Framebuffer)
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 -ac +extension GLX +render -noreset &
        echo "DISPLAY=:99" >> $GITHUB_ENV
        
        # Start window manager
        fluxbox &
        
        # Wait for X server to start
        sleep 5
        
        # Verify display is working
        xdpyinfo -display :99 || true

    - name: Setup Python Environment
      if: inputs.language == 'python'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Setup Node.js Environment  
      if: inputs.language == 'typescript'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Setup Rust Toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install Terminator SDK (Python)
      if: inputs.language == 'python'
      shell: bash
      run: |
        # Build and install Terminator Python bindings
        cd bindings/python
        pip install maturin
        maturin develop --release
        
        # Install additional dependencies
        pip install asyncio pytest pytest-asyncio

    - name: Install Terminator SDK (TypeScript)
      if: inputs.language == 'typescript'
      shell: bash
      run: |
        # Build and install Terminator Node.js bindings  
        cd bindings/nodejs
        npm install
        npm run build
        npm link
        
        # Install in project root
        cd ../..
        npm link terminator.js
        
        # Install TypeScript if needed
        npm install -g typescript ts-node

    - name: Validate Test Script
      shell: bash
      run: |
        if [ ! -f "${{ inputs.test-script }}" ]; then
          echo "Error: Test script not found at ${{ inputs.test-script }}"
          exit 1
        fi
        echo "Test script found: ${{ inputs.test-script }}"

    - name: Run Website Test
      id: run-test
      shell: bash
      run: |
        set -e
        
        # Set environment variables
        export TERMINATOR_URL="${{ inputs.website-url }}"
        export TERMINATOR_BROWSER="${{ inputs.browser }}"
        export TERMINATOR_HEADLESS="${{ inputs.headless }}"
        export TERMINATOR_TIMEOUT="${{ inputs.timeout }}"
        
        # Create output directory
        mkdir -p test-outputs
        
        echo "Starting website test..."
        echo "URL: ${{ inputs.website-url }}"
        echo "Browser: ${{ inputs.browser }}"
        echo "Language: ${{ inputs.language }}"
        echo "Script: ${{ inputs.test-script }}"
        
        # Run the test based on language
        if [ "${{ inputs.language }}" = "python" ]; then
          echo "Running Python test..."
          timeout ${{ inputs.timeout }} python "${{ inputs.test-script }}" || TEST_EXIT_CODE=$?
        else
          echo "Running TypeScript test..."
          timeout ${{ inputs.timeout }} ts-node "${{ inputs.test-script }}" || TEST_EXIT_CODE=$?
        fi
        
        # Check test result
        if [ ${TEST_EXIT_CODE:-0} -eq 0 ]; then
          echo "result=success" >> $GITHUB_OUTPUT
          echo "✅ Test completed successfully"
        else
          echo "result=failure" >> $GITHUB_OUTPUT
          echo "❌ Test failed with exit code: ${TEST_EXIT_CODE:-unknown}"
          
          # Try to capture screenshot on failure
          if command -v scrot >/dev/null 2>&1; then
            scrot test-outputs/failure-screenshot.png || true
            echo "screenshot=test-outputs/failure-screenshot.png" >> $GITHUB_OUTPUT
          fi
          
          exit ${TEST_EXIT_CODE:-1}
        fi

    - name: Upload Test Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: terminator-test-results-${{ runner.os }}-${{ inputs.language }}
        path: |
          test-outputs/
          *.log
        retention-days: 7