---
tool_name: execute_sequence
arguments:
  steps:
    # Step 1: Navigate to example.com
    - tool_name: navigate_browser
      id: navigate_blank
      arguments:
        url: "https://example.com"
        browser_type: "Chrome"
      delay_ms: 2000

    # Step 2: Inject comprehensive test UI
    - tool_name: execute_browser_script
      id: inject_test_ui
      arguments:
        selector: "role:Window|name:Chrome"
        script: |
          (function() {
            document.body.innerHTML = `
              <h1>Terminator.js UI Element Test Page</h1>
              <div style="padding: 20px; line-height: 1.2;">
                <div style="margin-bottom: 5px;"><strong>Text Input:</strong> <input type="text" id="testInput" value="Initial Value" aria-label="Test input field" style="width: 300px; padding: 5px; font-size: 14px;"></div>
                <div style="margin-bottom: 5px;"><strong>Checkbox:</strong> <input type="checkbox" id="testCheckbox" checked aria-label="Test checkbox" style="width: 20px; height: 20px; vertical-align: middle;"> <label for="testCheckbox" style="font-size: 14px;">Test Checkbox (initially checked)</label></div>
                <div style="margin-bottom: 5px;"><strong>Range Slider:</strong> <input type="range" id="testSlider" min="0" max="100" value="50" aria-label="Test slider" style="width: 250px; height: 20px; vertical-align: middle;"> <span id="sliderValue" style="font-size: 14px;">50</span></div>
                <div style="margin-bottom: 5px;"><strong>Select Dropdown:</strong> <select id="testSelect" aria-label="Test dropdown" style="font-size: 14px; padding: 3px;"><option value="opt1">Option 1</option><option value="opt2" selected>Option 2</option><option value="opt3">Option 3</option></select></div>
                <div style="margin-bottom: 5px;"><strong>Radio Buttons:</strong> <input type="radio" id="radio1" name="radioGroup" value="r1" aria-label="Radio option 1" style="width: 18px; height: 18px; vertical-align: middle;"> <label for="radio1" style="font-size: 14px;">Radio 1</label> <input type="radio" id="radio2" name="radioGroup" value="r2" checked aria-label="Radio option 2" style="width: 18px; height: 18px; vertical-align: middle;"> <label for="radio2" style="font-size: 14px;">Radio 2</label> <input type="radio" id="radio3" name="radioGroup" value="r3" aria-label="Radio option 3" style="width: 18px; height: 18px; vertical-align: middle;"> <label for="radio3" style="font-size: 14px;">Radio 3</label></div>
                <div style="margin-bottom: 5px;"><strong>Button:</strong> <button id="testButton" aria-label="Test button" style="padding: 8px 20px; font-size: 14px;">Click Me</button> <span id="buttonClicks" style="font-size: 14px;">Clicks: 0</span></div>
                <div style="margin-bottom: 5px;"><strong>Textarea:</strong> <textarea id="testTextarea" aria-label="Test textarea" style="width: 300px; height: 60px; font-size: 14px; padding: 5px; vertical-align: top;">Textarea content here</textarea></div>
              </div>
            `;

            // Add event listeners
            document.getElementById('testSlider').addEventListener('input', (e) => {
              document.getElementById('sliderValue').textContent = e.target.value;
            });

            let clicks = 0;
            document.getElementById('testButton').addEventListener('click', () => {
              clicks++;
              document.getElementById('buttonClicks').textContent = 'Clicks: ' + clicks;
            });

            return JSON.stringify({ ui_created: true });
          })()
      delay_ms: 100  # Wait for accessibility tree to update

    # Step 3: Set zoom to 50%
    - tool_name: run_command
      id: set_zoom_50
      arguments:
        engine: javascript
        run: |
          await desktop.setZoom(50);
          console.log('✓ Zoom set to 50%');
          return { zoom_set: true };
      delay_ms: 100

    # Step 4: Highlight input field
    - tool_name: run_command
      id: highlight_input
      arguments:
        engine: javascript
        run: |
          // Find and highlight input field
          const inputElements = await desktop.locator('role:edit').all(3000, 10);
          if (inputElements.length > 0) {
            const highlight = inputElements[0].highlight(0x00FF00, 3000, 'Test Input', 'TopLeft');
            console.log('✓ Input field highlighted');
          }
          return { input_highlighted: true };
      delay_ms: 100

    # Step 5: Test getValue() on text input
    - tool_name: execute_browser_script
      id: test_input_value
      arguments:
        selector: "role:Window|name:Chrome"
        script: |
          (function() {
            const initialValue = document.getElementById('testInput').value;
            console.log('✓ Initial input value:', initialValue);
            return JSON.stringify({ input_initial_value: initialValue });
          })()
      delay_ms: 100

    # Step 6: Change input value
    - tool_name: execute_browser_script
      id: change_input_value
      arguments:
        selector: "role:Window|name:Chrome"
        script: |
          (function() {
            document.getElementById('testInput').value = 'Changed via script';
            const updatedValue = document.getElementById('testInput').value;
            console.log('✓ Updated input value:', updatedValue);
            return JSON.stringify({ input_updated_value: updatedValue });
          })()
      delay_ms: 100

    # Step 7: Highlight checkbox
    - tool_name: run_command
      id: highlight_checkbox
      arguments:
        engine: javascript
        run: |
          // Find and highlight checkbox
          const checkboxes = await desktop.locator('role:checkbox').all(3000, 10);
          if (checkboxes.length > 0) {
            const highlight = checkboxes[0].highlight(0x00FF00, 3000, 'Checkbox', 'TopRight');
            console.log('✓ Checkbox highlighted');
          }
          return { checkbox_highlighted: true };
      delay_ms: 100

    # Step 8: Test checkbox state
    - tool_name: execute_browser_script
      id: test_checkbox
      arguments:
        selector: "role:Window|name:Chrome"
        script: |
          (function() {
            const initialState = document.getElementById('testCheckbox').checked;
            console.log('✓ Initial checkbox state:', initialState);

            // Toggle to false
            document.getElementById('testCheckbox').checked = false;
            const uncheckedState = document.getElementById('testCheckbox').checked;
            console.log('✓ Checkbox toggled to:', uncheckedState);

            // Toggle back to true
            document.getElementById('testCheckbox').checked = true;
            const checkedState = document.getElementById('testCheckbox').checked;
            console.log('✓ Checkbox toggled back to:', checkedState);

            return JSON.stringify({
              checkbox_initial: initialState,
              checkbox_final: checkedState
            });
          })()
      delay_ms: 100

    # Step 9: Highlight slider
    - tool_name: run_command
      id: highlight_slider
      arguments:
        engine: javascript
        run: |
          // Find and highlight slider
          const sliders = await desktop.locator('role:slider').all(3000, 10);
          if (sliders.length > 0) {
            const highlight = sliders[0].highlight(0x00FF00, 3000, 'Slider', 'BottomLeft');
            console.log('✓ Slider highlighted');
          }
          return { slider_highlighted: true };
      delay_ms: 100

    # Step 10: Test slider
    - tool_name: execute_browser_script
      id: test_slider
      arguments:
        selector: "role:Window|name:Chrome"
        script: |
          (function() {
            const initialValue = document.getElementById('testSlider').value;
            console.log('✓ Initial slider value:', initialValue);

            // Set to 75
            document.getElementById('testSlider').value = '75';
            document.getElementById('sliderValue').textContent = '75';
            const value75 = document.getElementById('testSlider').value;
            console.log('✓ Slider updated to:', value75);

            // Set to 25
            document.getElementById('testSlider').value = '25';
            document.getElementById('sliderValue').textContent = '25';
            const value25 = document.getElementById('testSlider').value;
            console.log('✓ Slider updated to:', value25);

            return JSON.stringify({
              slider_initial: initialValue,
              slider_final: value25
            });
          })()
      delay_ms: 100

    # Step 11: Test radio buttons
    - tool_name: execute_browser_script
      id: test_radio_buttons
      arguments:
        selector: "role:Window|name:Chrome"
        script: |
          (function() {
            const radio2State = document.getElementById('radio2').checked;
            console.log('✓ Radio 2 checked:', radio2State);

            // Switch to radio 3
            document.getElementById('radio3').checked = true;
            const radio3State = document.getElementById('radio3').checked;
            const radio2StateAfter = document.getElementById('radio2').checked;
            console.log('✓ Switched to Radio 3:', radio3State, '(Radio 2 now:', radio2StateAfter + ')');

            return JSON.stringify({
              radio2_initial: radio2State,
              radio3_final: radio3State,
              radio2_final: radio2StateAfter
            });
          })()
      delay_ms: 100

    # Step 12: Test select dropdown
    - tool_name: execute_browser_script
      id: test_dropdown
      arguments:
        selector: "role:Window|name:Chrome"
        script: |
          (function() {
            const initialValue = document.getElementById('testSelect').value;
            console.log('✓ Initial select value:', initialValue);

            // Change to opt3
            document.getElementById('testSelect').value = 'opt3';
            const updatedValue = document.getElementById('testSelect').value;
            console.log('✓ Select changed to:', updatedValue);

            return JSON.stringify({
              select_initial: initialValue,
              select_final: updatedValue
            });
          })()
      delay_ms: 100

    # Step 13: Test textarea
    - tool_name: execute_browser_script
      id: test_textarea
      arguments:
        selector: "role:Window|name:Chrome"
        script: |
          (function() {
            const initialValue = document.getElementById('testTextarea').value;
            console.log('✓ Initial textarea value:', initialValue.substring(0, 30) + '...');

            // Update textarea
            document.getElementById('testTextarea').value = 'Updated textarea content\\nLine 2\\nLine 3';
            const updatedValue = document.getElementById('testTextarea').value;
            console.log('✓ Updated textarea value:', updatedValue);

            return JSON.stringify({
              textarea_initial: initialValue,
              textarea_final: updatedValue
            });
          })()
      delay_ms: 100

    # Step 14: Highlight button
    - tool_name: run_command
      id: highlight_button
      arguments:
        engine: javascript
        run: |
          // Find and highlight button
          const buttons = await desktop.locator('role:button').all(3000, 50);
          console.log(`Found ${buttons.length} buttons, searching for test button...`);

          let testButton = null;
          for (let i = 0; i < buttons.length; i++) {
            const name = buttons[i].name();
            if (name && (name.includes('Test button') || name.includes('Click Me'))) {
              testButton = buttons[i];
              console.log(`Found test button at index ${i}: "${name}"`);
              break;
            }
          }

          if (testButton) {
            const highlight = testButton.highlight(0x00FF00, 3000, 'Click Me Button', 'BottomRight');
            console.log('✓ Button highlighted');
          }
          return { button_highlighted: true };
      delay_ms: 100

    # Step 15: Test button clicks
    - tool_name: execute_browser_script
      id: test_button_clicks
      arguments:
        selector: "role:Window|name:Chrome"
        script: |
          (function() {
            const initialClicks = document.getElementById('buttonClicks').textContent;
            console.log('✓ Initial button clicks:', initialClicks);

            // Click once
            document.getElementById('testButton').click();
            const clicks1 = document.getElementById('buttonClicks').textContent;
            console.log('✓ After click:', clicks1);

            // Click twice more
            document.getElementById('testButton').click();
            document.getElementById('testButton').click();
            const clicks3 = document.getElementById('buttonClicks').textContent;
            console.log('✓ After 2 more clicks:', clicks3);

            return JSON.stringify({
              clicks_initial: initialClicks,
              clicks_final: clicks3
            });
          })()
      delay_ms: 100

    # Step 16: Highlight input for keyboard test
    - tool_name: run_command
      id: highlight_keyboard_input
      arguments:
        engine: javascript
        run: |
          // Find and highlight input field
          const inputElement = await desktop.locator('role:edit').first(2000);
          const highlight = inputElement.highlight(0x00FF00, 3000, 'Keyboard Test', 'TopLeft');
          console.log('✓ Input field highlighted for keyboard test');
          return { keyboard_input_highlighted: true };
      delay_ms: 100

    # Step 17: Test keyboard interaction with input
    - tool_name: run_command
      id: test_keyboard_input
      arguments:
        engine: javascript
        run: |
          // Click on the input field
          const inputElement = await desktop.locator('role:edit').first(2000);
          await inputElement.click();

          // Select all and delete
          await desktop.pressKey('{Ctrl}a');
          await desktop.pressKey('{Delete}');

          // Type new text
          await desktop.pressKey('Typed via pressKey');

          console.log('✓ Keyboard input test completed');
          return { keyboard_test_complete: true };
      delay_ms: 100

    # Step 18: Verify typed value
    - tool_name: execute_browser_script
      id: verify_typed_value
      arguments:
        selector: "role:Window|name:Chrome"
        script: |
          (function() {
            const typedValue = document.getElementById('testInput').value;
            console.log('✓ Value after pressKey():', typedValue);
            return JSON.stringify({ typed_value: typedValue });
          })()
      delay_ms: 100

    # Step 19: Create scrollable content
    - tool_name: execute_browser_script
      id: create_scroll_content
      arguments:
        selector: "role:Window|name:Chrome"
        script: |
          (function() {
            const scrollDiv = document.createElement('div');
            scrollDiv.innerHTML = '<h2>Scroll Test</h2>' +
              '<div style="height: 2000px; background: linear-gradient(white, lightblue);"></div>' +
              '<div id="bottomElement" style="padding: 20px; background: yellow;">Bottom Element</div>';
            document.body.appendChild(scrollDiv);

            const scrollBefore = window.scrollY;
            console.log('✓ Scroll position before:', scrollBefore);
            return JSON.stringify({ scroll_before: scrollBefore });
          })()
      delay_ms: 100

    # Step 20: Scroll to bottom element
    - tool_name: execute_browser_script
      id: scroll_to_bottom
      arguments:
        selector: "role:Window|name:Chrome"
        script: |
          (function() {
            document.getElementById('bottomElement').scrollIntoView({behavior: 'smooth'});
            return JSON.stringify({ scrolled: true });
          })()
      delay_ms: 100

    # Step 21: Verify scroll position
    - tool_name: execute_browser_script
      id: verify_scroll
      arguments:
        selector: "role:Window|name:Chrome"
        script: |
          (function() {
            const scrollAfter = window.scrollY;
            console.log('✓ Scroll position after scrollIntoView():', scrollAfter);
            return JSON.stringify({ scroll_after: scrollAfter });
          })()
      delay_ms: 100

    # Step 22: Test validate() with delayed element
    - tool_name: execute_browser_script
      id: schedule_delayed_element
      arguments:
        selector: "role:Window|name:Chrome"
        script: |
          (function() {
            setTimeout(() => {
              const delayed = document.createElement('button');
              delayed.id = 'delayedButton';
              delayed.textContent = 'I appeared after 2 seconds!';
              delayed.setAttribute('aria-label', 'Delayed button');
              document.body.appendChild(delayed);
            }, 2000);
            return JSON.stringify({ scheduled: true });
          })()
      delay_ms: 100

    # Step 23: Validate before element appears
    - tool_name: validate_element
      id: validate_before
      arguments:
        selector: "role:button|name:I appeared"
        timeout_ms: 500
      delay_ms: 100  # Wait for element to appear

    # Step 24: Validate after element appears
    - tool_name: validate_element
      id: validate_after
      arguments:
        selector: "role:button|name:I appeared"
        timeout_ms: 1000
      delay_ms: 100

    # Step 25: Test delay() timing accuracy
    - tool_name: run_command
      id: test_delay_timing
      arguments:
        engine: javascript
        run: |
          const timings = [];
          for (let i = 0; i < 5; i++) {
            const start = Date.now();
            await new Promise(resolve => setTimeout(resolve, 100));
            timings.push(Date.now() - start);
          }
          const avg = timings.reduce((a, b) => a + b) / timings.length;
          console.log('✓ 5x delay(100ms) timings:', timings.map(t => t + 'ms').join(', '));
          console.log('✓ Average:', avg.toFixed(1) + 'ms (±' + (avg - 100).toFixed(1) + 'ms)');
          return {
            timings: timings,
            average: avg,
            deviation: avg - 100
          };
      delay_ms: 100

    # Step 26: Reset zoom to 100%
    - tool_name: run_command
      id: reset_zoom
      arguments:
        engine: javascript
        run: |
          await desktop.setZoom(100);
          console.log('✓ Zoom reset to 100%');
          return { zoom_reset: true };
      delay_ms: 100

    # Step 27: Close browser tab
    - tool_name: run_command
      id: close_tab
      arguments:
        engine: javascript
        run: |
          await desktop.pressKey('{Ctrl}w');
          console.log('✓ Browser tab closed');
          return { tab_closed: true };
      delay_ms: 100

# Output parser to summarize test results
output: |
  const inputValue = (typeof input_updated_value !== 'undefined') ? input_updated_value : 'N/A';
  const checkboxFinal = (typeof checkbox_final !== 'undefined') ? checkbox_final : false;
  const sliderFinal = (typeof slider_final !== 'undefined') ? slider_final : 'N/A';
  const selectFinal = (typeof select_final !== 'undefined') ? select_final : 'N/A';
  const clicksFinal = (typeof clicks_final !== 'undefined') ? clicks_final : 'N/A';
  const typedValue = (typeof typed_value !== 'undefined') ? typed_value : 'N/A';
  const scrollAfter = (typeof scroll_after !== 'undefined') ? scroll_after : 0;
  const validateBeforeExists = (typeof validate_before_result !== 'undefined') ? validate_before_result.exists : false;
  const validateAfterExists = (typeof validate_after_result !== 'undefined') ? validate_after_result.exists : false;
  const avgTiming = (typeof average !== 'undefined') ? average : 0;

  return {
    success: true,
    message: 'Comprehensive UI Elements Test Completed Successfully',
    data: {
      input_test: { value: inputValue },
      checkbox_test: { final_state: checkboxFinal },
      slider_test: { final_value: sliderFinal },
      select_test: { final_value: selectFinal },
      button_test: { final_clicks: clicksFinal },
      keyboard_test: { typed_value: typedValue },
      scroll_test: { scroll_position: scrollAfter },
      validation_test: {
        before_appears: validateBeforeExists,
        after_appears: validateAfterExists
      },
      timing_test: { average_ms: avgTiming }
    }
  };

workflow_info:
  name: Comprehensive UI Elements Test
  description: Tests all UI element types including input, checkbox, slider, radio buttons, dropdown, textarea, button, keyboard interaction, scrolling, and element validation
  version: "1.0"
  created: 2025-10-14T00:00:00.000Z
  type: demo_test
