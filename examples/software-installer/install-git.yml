---
# Install Git with configuration
# Includes setting up Git credentials and SSH keys
tool_name: execute_sequence
arguments:
  variables:
    user_name:
      type: string
      label: "Git user name"
      required: false

    user_email:
      type: string
      label: "Git user email"
      required: false

    default_branch:
      type: string
      label: "Default branch name"
      default: "main"

    configure_ssh:
      type: boolean
      label: "Generate SSH key for GitHub/GitLab"
      default: false

  steps:
    # Install Git
    - tool_name: execute_sequence
      arguments:
        workflow_file: "./install-software.yml"
        inputs:
          software_name: "Git"
          package_id: "Git.Git"
          download_url: "https://github.com/git-for-windows/git/releases/latest/download/Git-2.43.0-64-bit.exe"
          silent_install_args: "/VERYSILENT /NORESTART /NOCANCEL /SP- /CLOSEAPPLICATIONS /RESTARTAPPLICATIONS /COMPONENTS='icons,ext\\reg\\shellhere,assoc,assoc_sh'"
      id: "install_git"

    # Wait for installation
    - tool_name: wait
      arguments:
        seconds: 5
      id: "wait_for_git"

    # Configure Git user
    - tool_name: run_command
      arguments:
        run: |
          $userName = '${{inputs.user_name}}'
          $userEmail = '${{inputs.user_email}}'
          $defaultBranch = '${{inputs.default_branch}}'

          # Verify Git is installed
          git --version

          # Configure user name if provided
          if ($userName -and $userName -ne '') {
            git config --global user.name "$userName"
            Write-Host "Git user name set to: $userName"
          }

          # Configure user email if provided
          if ($userEmail -and $userEmail -ne '') {
            git config --global user.email "$userEmail"
            Write-Host "Git user email set to: $userEmail"
          }

          # Set default branch
          git config --global init.defaultBranch "$defaultBranch"
          Write-Host "Default branch set to: $defaultBranch"

          # Configure useful settings
          git config --global core.autocrlf true
          git config --global pull.rebase false
          git config --global fetch.prune true
          git config --global diff.colorMoved zebra

          # Show current configuration
          Write-Host "`nCurrent Git configuration:"
          git config --global --list
        shell: powershell
      id: "configure_git"
      continue_on_error: true
      delay_ms: 2000

    # Generate SSH key if requested
    - tool_name: run_command
      arguments:
        run: |
          $configureSsh = '${{inputs.configure_ssh}}'
          $userEmail = '${{inputs.user_email}}'

          if ($configureSsh -eq 'true') {
            Write-Host "Generating SSH key..."

            $sshDir = "$env:USERPROFILE\.ssh"
            if (-not (Test-Path $sshDir)) {
              New-Item -ItemType Directory -Path $sshDir -Force
            }

            $keyPath = "$sshDir\id_ed25519"

            if (Test-Path $keyPath) {
              Write-Host "SSH key already exists at: $keyPath"
            } else {
              # Generate SSH key
              if ($userEmail -and $userEmail -ne '') {
                ssh-keygen -t ed25519 -C "$userEmail" -f $keyPath -N '""'
              } else {
                ssh-keygen -t ed25519 -f $keyPath -N '""'
              }

              Write-Host "SSH key generated at: $keyPath"

              # Display public key
              $publicKey = Get-Content "$keyPath.pub"
              Write-Host "`nYour SSH public key (add this to GitHub/GitLab):"
              Write-Host $publicKey
            }

            # Start SSH agent
            Start-Service ssh-agent -ErrorAction SilentlyContinue
            ssh-add $keyPath 2>$null

            Write-Host "`nSSH key setup complete!"
          } else {
            Write-Host "Skipping SSH key generation"
          }
        shell: powershell
      id: "setup_ssh"
      continue_on_error: true
      condition: "${{inputs.configure_ssh}}"
      delay_ms: 2000

    # Install Git LFS
    - tool_name: run_command
      arguments:
        run: |
          Write-Host "Installing Git LFS..."
          git lfs install
          Write-Host "Git LFS installed and configured"
        shell: powershell
      id: "install_lfs"
      continue_on_error: true
      delay_ms: 1000

  output_parser:
    javascript_code: |
      const steps = context.steps || [];
      const installStep = steps.find(s => s.id === 'install_git');
      const configStep = steps.find(s => s.id === 'configure_git');
      const sshStep = steps.find(s => s.id === 'setup_ssh');
      const lfsStep = steps.find(s => s.id === 'install_lfs');

      const success = installStep?.status === 'success';

      return {
        success: success,
        data: {
          software: 'Git',
          installed: success,
          configured: configStep?.status === 'success',
          ssh_configured: sshStep?.status === 'success',
          lfs_installed: lfsStep?.status === 'success',
          user_name: context.inputs?.user_name,
          user_email: context.inputs?.user_email,
          default_branch: context.inputs?.default_branch,
          message: success
            ? 'Git installed and configured successfully'
            : 'Git installation failed'
        }
      };