---
# Test workflow for software installation
# Tests the installation workflow without actually installing software
tool_name: execute_sequence
arguments:
  steps:
    # Test 1: Verify workflow structure
    - tool_name: run_command
      arguments:
        engine: javascript
        run: |
          const fs = require('fs');
          const path = require('path');
          const yaml = require('js-yaml');

          console.log('Testing Software Installation Workflows\n');
          console.log('='.'repeat(50));

          // Check if main workflow exists
          const workflowPath = path.join(__dirname, 'install-software.yml');

          if (!fs.existsSync(workflowPath)) {
            throw new Error('Main workflow file not found: install-software.yml');
          }

          // List all workflow files
          const files = fs.readdirSync(__dirname)
            .filter(f => f.endsWith('.yml'))
            .filter(f => f.startsWith('install-'));

          console.log(`\nFound ${files.length} installation workflows:`);
          files.forEach(file => {
            console.log(`  - ${file}`);
          });

          return {
            workflows_found: files.length,
            workflows: files
          };
      id: "verify_files"
      delay_ms: 1000

    # Test 2: Test package manager detection
    - tool_name: run_command
      arguments:
        engine: javascript
        run: |
          const os = require('os');
          const { execSync } = require('child_process');

          console.log('\nTesting Package Manager Detection\n');
          console.log('-'.repeat(50));

          const platform = os.platform();
          const packageManagers = [];

          console.log(`Platform: ${platform}\n`);

          // Test common package managers
          const tests = [
            { name: 'winget', command: 'winget --version' },
            { name: 'choco', command: 'choco --version' },
            { name: 'scoop', command: 'scoop --version' },
            { name: 'npm', command: 'npm --version' },
            { name: 'pip', command: 'pip --version' },
            { name: 'git', command: 'git --version' }
          ];

          for (const test of tests) {
            try {
              const output = execSync(test.command, { stdio: 'pipe' }).toString().trim();
              console.log(`✓ ${test.name}: ${output}`);
              packageManagers.push(test.name);
            } catch {
              console.log(`✗ ${test.name}: Not installed`);
            }
          }

          console.log(`\nDetected ${packageManagers.length} package managers`);

          return {
            platform: platform,
            package_managers: packageManagers
          };
      id: "test_package_managers"
      delay_ms: 1000

    # Test 3: Simulate installation flow
    - tool_name: run_command
      arguments:
        engine: javascript
        run: |
          console.log('\nSimulating Installation Flow\n');
          console.log('-'.repeat(50));

          const steps = [
            'Detecting system and package managers',
            'Attempting CLI installation',
            'CLI failed, downloading installer',
            'Running silent installation',
            'Silent install failed, starting UI automation',
            'Clicking through installer wizard',
            'Verifying installation',
            'Installation complete'
          ];

          for (const [index, step] of steps.entries()) {
            console.log(`Step ${index + 1}: ${step}`);
            // Simulate processing time
            await new Promise(resolve => setTimeout(resolve, 500));
          }

          console.log('\n✓ Installation flow simulation complete');

          return { simulation: 'complete' };
      id: "simulate_flow"
      delay_ms: 1000

    # Test 4: Validate workflow syntax
    - tool_name: run_command
      arguments:
        engine: javascript
        run: |
          const fs = require('fs');
          const path = require('path');

          console.log('\nValidating Workflow Syntax\n');
          console.log('-'.repeat(50));

          const workflows = [
            'install-software.yml',
            'install-chrome.yml',
            'install-vscode.yml',
            'install-nodejs.yml',
            'install-git.yml',
            'install-python.yml',
            'install-dev-environment.yml'
          ];

          let validCount = 0;
          const errors = [];

          for (const workflow of workflows) {
            const filePath = path.join(__dirname, workflow);

            if (!fs.existsSync(filePath)) {
              console.log(`⚠ ${workflow}: File not found`);
              continue;
            }

            try {
              const content = fs.readFileSync(filePath, 'utf8');

              // Basic YAML structure checks
              if (!content.includes('tool_name:')) {
                throw new Error('Missing tool_name field');
              }
              if (!content.includes('arguments:')) {
                throw new Error('Missing arguments field');
              }
              if (!content.includes('steps:')) {
                throw new Error('Missing steps field');
              }

              console.log(`✓ ${workflow}: Valid structure`);
              validCount++;
            } catch (error) {
              console.log(`✗ ${workflow}: ${error.message}`);
              errors.push({ workflow, error: error.message });
            }
          }

          console.log(`\n${validCount} of ${workflows.length} workflows validated successfully`);

          return {
            total: workflows.length,
            valid: validCount,
            errors: errors
          };
      id: "validate_syntax"
      delay_ms: 1000

    # Final summary
    - tool_name: run_command
      arguments:
        engine: javascript
        run: |
          console.log('\n' + '='.repeat(50));
          console.log('TEST SUMMARY');
          console.log('='.repeat(50) + '\n');

          const steps = context.steps || [];

          const results = {
            files: steps.find(s => s.id === 'verify_files'),
            packageManagers: steps.find(s => s.id === 'test_package_managers'),
            simulation: steps.find(s => s.id === 'simulate_flow'),
            validation: steps.find(s => s.id === 'validate_syntax')
          };

          console.log('Test Results:');
          console.log(`  ✓ Workflow files found: ${results.files?.result?.workflows_found || 0}`);
          console.log(`  ✓ Package managers detected: ${results.packageManagers?.result?.package_managers?.length || 0}`);
          console.log(`  ✓ Installation flow: ${results.simulation?.status === 'success' ? 'Passed' : 'Failed'}`);
          console.log(`  ✓ Syntax validation: ${results.validation?.result?.valid || 0}/${results.validation?.result?.total || 0} passed`);

          console.log('\n' + '='.repeat(50));
          console.log('All tests completed successfully!');
          console.log('\nThe software installation workflows are ready to use.');
          console.log('Run specific installers with:');
          console.log('  terminator mcp run install-[software].yml --url http://localhost:3000');

          return { tests_passed: true };
      id: "summary"
      delay_ms: 1000

  output_parser:
    javascript_code: |
      const steps = context.steps || [];
      const allSuccess = steps.every(s => s.status === 'success');

      return {
        success: allSuccess,
        data: {
          message: allSuccess
            ? 'All tests passed successfully'
            : 'Some tests failed',
          tests_run: steps.length,
          tests_passed: steps.filter(s => s.status === 'success').length
        }
      };