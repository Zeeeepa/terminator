---
# Install Node.js and npm with version management
# Supports both package manager and direct installer approaches
tool_name: execute_sequence
arguments:
  variables:
    node_version:
      type: string
      label: "Node.js version (lts, latest, or specific like 20.x)"
      default: "lts"

    install_yarn:
      type: boolean
      label: "Also install Yarn package manager"
      default: true

    install_pnpm:
      type: boolean
      label: "Also install pnpm package manager"
      default: false

    global_packages:
      type: array
      label: "Global npm packages to install"
      default:
        - "typescript"
        - "nodemon"
        - "pm2"

  steps:
    # Determine Node.js download URL based on version
    - tool_name: run_command
      arguments:
        engine: javascript
        run: |
          const version = '${{inputs.node_version}}';
          const platform = require('os').platform();
          const arch = require('os').arch();

          let downloadUrl = '';

          // Determine the appropriate download URL
          if (platform === 'win32') {
            if (version === 'lts' || version === 'latest') {
              downloadUrl = `https://nodejs.org/dist/latest-${version === 'lts' ? 'lts' : 'current'}/node-${version === 'lts' ? 'lts' : 'latest'}-x64.msi`;
            } else {
              downloadUrl = `https://nodejs.org/dist/latest-v${version}/node-v${version}-x64.msi`;
            }
          } else if (platform === 'darwin') {
            if (version === 'lts' || version === 'latest') {
              downloadUrl = `https://nodejs.org/dist/latest-${version === 'lts' ? 'lts' : 'current'}/node-${version === 'lts' ? 'lts' : 'latest'}.pkg`;
            } else {
              downloadUrl = `https://nodejs.org/dist/latest-v${version}/node-v${version}.pkg`;
            }
          }

          console.log(`Node.js download URL: ${downloadUrl}`);

          return {
            download_url: downloadUrl,
            version: version,
            platform: platform
          };
      id: "prepare_nodejs"
      delay_ms: 1000

    # Install Node.js
    - tool_name: execute_sequence
      arguments:
        workflow_file: "./install-software.yml"
        inputs:
          software_name: "Node.js"
          package_id: "OpenJS.NodeJS"
          download_url: "${{steps.prepare_nodejs.download_url}}"
          silent_install_args: "/quiet /norestart"
          ui_install_steps:
            - tool_name: click_element
              arguments:
                selector: "role:Button|name:Next"
            - tool_name: click_element
              arguments:
                selector: "role:CheckBox|name:I accept"
            - tool_name: click_element
              arguments:
                selector: "role:Button|name:Next"
            - tool_name: click_element
              arguments:
                selector: "role:Button|name:Next"
            - tool_name: click_element
              arguments:
                selector: "role:CheckBox|name:Automatically install"
            - tool_name: click_element
              arguments:
                selector: "role:Button|name:Next"
            - tool_name: click_element
              arguments:
                selector: "role:Button|name:Install"
            - tool_name: wait_for_element
              arguments:
                selector: "role:Button|name:Finish"
                timeout_ms: 120000
            - tool_name: click_element
              arguments:
                selector: "role:Button|name:Finish"
      id: "install_nodejs"

    # Verify Node.js and npm installation
    - tool_name: run_command
      arguments:
        run: |
          node --version
          npm --version
          npx --version
        shell: cmd
      id: "verify_node"
      continue_on_error: true
      delay_ms: 3000

    # Install Yarn if requested
    - tool_name: run_command
      arguments:
        run: |
          if ('${{inputs.install_yarn}}' -eq 'true') {
            Write-Host "Installing Yarn..."
            npm install -g yarn
            yarn --version
          } else {
            Write-Host "Skipping Yarn installation"
          }
        shell: powershell
      id: "install_yarn"
      continue_on_error: true
      condition: "${{inputs.install_yarn}}"
      delay_ms: 2000

    # Install pnpm if requested
    - tool_name: run_command
      arguments:
        run: |
          if ('${{inputs.install_pnpm}}' -eq 'true') {
            Write-Host "Installing pnpm..."
            npm install -g pnpm
            pnpm --version
          } else {
            Write-Host "Skipping pnpm installation"
          }
        shell: powershell
      id: "install_pnpm"
      continue_on_error: true
      condition: "${{inputs.install_pnpm}}"
      delay_ms: 2000

    # Install global npm packages
    - tool_name: run_command
      arguments:
        engine: javascript
        run: |
          const { execSync } = require('child_process');
          const packages = ${{inputs.global_packages}};

          if (!packages || packages.length === 0) {
            console.log('No global packages to install');
            return { installed: [] };
          }

          console.log(`Installing ${packages.length} global npm packages...`);

          const installed = [];
          const failed = [];

          for (const pkg of packages) {
            try {
              console.log(`Installing ${pkg}...`);
              execSync(`npm install -g ${pkg}`, { stdio: 'pipe' });
              installed.push(pkg);
              console.log(`✓ ${pkg} installed successfully`);
            } catch (error) {
              console.log(`✗ Failed to install ${pkg}: ${error.message}`);
              failed.push(pkg);
            }
          }

          console.log(`\nInstalled ${installed.length} of ${packages.length} packages`);

          return {
            total: packages.length,
            installed: installed,
            failed: failed
          };
      id: "install_packages"
      continue_on_error: true
      delay_ms: 2000

    # Setup npm configuration
    - tool_name: run_command
      arguments:
        run: |
          # Configure npm for better performance
          npm config set fund false
          npm config set audit false
          npm config set update-notifier false

          # Show current npm configuration
          npm config list
        shell: cmd
      id: "configure_npm"
      continue_on_error: true
      delay_ms: 1000

  output_parser:
    javascript_code: |
      const steps = context.steps || [];
      const installStep = steps.find(s => s.id === 'install_nodejs');
      const verifyStep = steps.find(s => s.id === 'verify_node');
      const packagesStep = steps.find(s => s.id === 'install_packages');
      const yarnStep = steps.find(s => s.id === 'install_yarn');
      const pnpmStep = steps.find(s => s.id === 'install_pnpm');

      const success = installStep?.status === 'success' && verifyStep?.status === 'success';

      return {
        success: success,
        data: {
          software: 'Node.js',
          version: context.inputs?.node_version,
          installed: success,
          yarn_installed: yarnStep?.status === 'success',
          pnpm_installed: pnpmStep?.status === 'success',
          global_packages_installed: packagesStep?.result?.installed || [],
          global_packages_failed: packagesStep?.result?.failed || [],
          message: success
            ? `Node.js ${context.inputs?.node_version} installed with ${packagesStep?.result?.installed?.length || 0} global packages`
            : 'Node.js installation failed'
        }
      };