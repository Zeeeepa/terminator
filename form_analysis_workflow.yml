# @workflow-info
# name: Form Analysis Workflow
# description: Analyze SAP login form state in detail
# version: 1.0.0

variables:
  chrome_window:
    type: string
    default: "role:Window|name:SAP BusinessOne - Google Chrome"

steps:
  - name: Analyze form state
    tool_name: execute_browser_script
    id: analyze_form_state
    arguments:
      selector: "{{ chrome_window }}"
      script: |
        const analysis = {};

        // Find domain_user field
        const domainUser = document.querySelector('input[name="domain_user"]');
        if (domainUser) {
          analysis.domainUser = {
            element: domainUser.tagName + (domainUser.id ? '#' + domainUser.id : ''),
            value: domainUser.value,
            type: domainUser.type,
            disabled: domainUser.disabled,
            readOnly: domainUser.readOnly,
            required: domainUser.required,
            classList: [...domainUser.classList],
            validationMessage: domainUser.validationMessage,
            validity: {
              valid: domainUser.validity.valid,
              valueMissing: domainUser.validity.valueMissing,
              badInput: domainUser.validity.badInput,
              customError: domainUser.validity.customError
            },
            dataAttributes: Object.fromEntries([...domainUser.attributes].filter(attr => attr.name.startsWith('data-')).map(attr => [attr.name, attr.value]))
          };
        }

        // Find domain_password field
        const domainPassword = document.querySelector('input[name="domain_password"]');
        if (domainPassword) {
          analysis.domainPassword = {
            element: domainPassword.tagName + (domainPassword.id ? '#' + domainPassword.id : ''),
            hasValue: !!domainPassword.value,
            valueLength: domainPassword.value.length,
            type: domainPassword.type,
            disabled: domainPassword.disabled,
            readOnly: domainPassword.readOnly,
            required: domainPassword.required,
            classList: [...domainPassword.classList],
            validationMessage: domainPassword.validationMessage,
            validity: {
              valid: domainPassword.validity.valid,
              valueMissing: domainPassword.validity.valueMissing,
              badInput: domainPassword.validity.badInput,
              customError: domainPassword.validity.customError
            },
            dataAttributes: Object.fromEntries([...domainPassword.attributes].filter(attr => attr.name.startsWith('data-')).map(attr => [attr.name, attr.value]))
          };
        }

        // Find logon_sbo_btn button
        const logonBtn = document.querySelector('input[name="logon_sbo_btn"]');
        if (logonBtn) {
          analysis.logonBtn = {
            element: logonBtn.tagName + (logonBtn.id ? '#' + logonBtn.id : ''),
            type: logonBtn.type,
            value: logonBtn.value,
            disabled: logonBtn.disabled,
            classList: [...logonBtn.classList],
            onclick: logonBtn.onclick ? logonBtn.onclick.toString() : null,
            formAttribute: logonBtn.form ? 'form found' : 'no form',
            dataAttributes: Object.fromEntries([...logonBtn.attributes].filter(attr => attr.name.startsWith('data-')).map(attr => [attr.name, attr.value]))
          };
        }

        // Find form element
        const form = document.querySelector('form');
        if (form) {
          analysis.form = {
            element: form.tagName + (form.id ? '#' + form.id : ''),
            action: form.action,
            method: form.method,
            checkValidity: form.checkValidity(),
            onsubmit: form.onsubmit ? form.onsubmit.toString() : null,
            noValidate: form.noValidate,
            dataAttributes: Object.fromEntries([...form.attributes].filter(attr => attr.name.startsWith('data-')).map(attr => [attr.name, attr.value]))
          };
        }

        // Check window variables
        analysis.windowVars = {
          jQuery: typeof window.jQuery !== 'undefined',
          $: typeof window.$ !== 'undefined',
          sapVariables: []
        };

        // Look for SAP-related variables
        for (let prop in window) {
          if (prop.toLowerCase().includes('sap') || prop.toLowerCase().includes('login') || prop.toLowerCase().includes('auth')) {
            analysis.windowVars.sapVariables.push(prop);
          }
        }

        // Check for loading indicators
        analysis.loadingIndicators = {
          loadingElements: document.querySelectorAll('[class*="loading"], [class*="spinner"], [id*="loading"]').length,
          hiddenElements: document.querySelectorAll('[style*="display: none"]').length
        };

        // Check form validation state
        if (form) {
          const allInputs = form.querySelectorAll('input, select, textarea');
          analysis.formValidation = {
            totalInputs: allInputs.length,
            requiredInputs: [...allInputs].filter(input => input.required).length,
            invalidInputs: [...allInputs].filter(input => !input.validity.valid).length,
            emptyRequiredInputs: [...allInputs].filter(input => input.required && !input.value).length
          };
        }

        // Check for event listeners on form elements
        analysis.eventListeners = {};
        if (domainUser) {
          analysis.eventListeners.domainUser = {
            onclick: domainUser.onclick ? domainUser.onclick.toString() : null,
            onchange: domainUser.onchange ? domainUser.onchange.toString() : null,
            oninput: domainUser.oninput ? domainUser.oninput.toString() : null
          };
        }
        if (domainPassword) {
          analysis.eventListeners.domainPassword = {
            onclick: domainPassword.onclick ? domainPassword.onclick.toString() : null,
            onchange: domainPassword.onchange ? domainPassword.onchange.toString() : null,
            oninput: domainPassword.oninput ? domainPassword.oninput.toString() : null
          };
        }
        if (logonBtn) {
          analysis.eventListeners.logonBtn = {
            onclick: logonBtn.onclick ? logonBtn.onclick.toString() : null
          };
        }
        if (form) {
          analysis.eventListeners.form = {
            onsubmit: form.onsubmit ? form.onsubmit.toString() : null
          };
        }

        // Check AJAX/fetch availability
        analysis.ajaxIndicators = {
          XMLHttpRequest: typeof XMLHttpRequest !== 'undefined',
          fetch: typeof fetch !== 'undefined'
        };

        return JSON.stringify(analysis, null, 2);